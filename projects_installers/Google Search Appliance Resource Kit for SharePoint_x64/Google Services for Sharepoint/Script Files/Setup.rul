////////////////////////////////////////////////////////////////////////////////
//                                                                            
//  This template script provides the code necessary to build an entry-point 
//  function to be called in an InstallScript custom action. 
//                                                                            
//                                                                            
//    File Name:  Setup.rul                                                   
//                                                                            
//  Description:  InstallShield script                                        
//
////////////////////////////////////////////////////////////////////////////////

// Include Ifx.h for built-in InstallScript function prototypes, for Windows 
// Installer API function prototypes and constants, and to declare code for 
// the OnBegin and OnEnd events.
#include "ifx.h"

// The keyword export identifies MyFunction() as an entry-point function.
// The argument it accepts must be a handle to the Installer database.
export prototype GetASPNETKEY(HWND);
export prototype GetIISServiceState(HWND);

// To Do:  Declare global variables, define constants, and prototype user-
//         defined and DLL functions here.


// To Do:  Create a custom action for this entry-point function:
// 1.  Right-click on "Custom Actions" in the Sequences/Actions view.
// 2.  Select "Custom Action Wizard" from the context menu.
// 3.  Proceed through the wizard and give the custom action a unique name.
// 4.  Select "Run InstallScript code" for the custom action type, and in
//     the next panel select "MyFunction" (or the new name of the entry-
//     point function) for the source.
// 5.  Click Next, accepting the default selections until the wizard
//     creates the custom action.
//
// Once you have made a custom action, you must execute it in your setup by
// inserting it into a sequence or making it the result of a dialog's
// control event.

///////////////////////////////////////////////////////////////////////////////
//                                                                           
// Function:  MyFunction
//                                                                           
//  Purpose:  This function will be called by the script engine when
//            Windows(TM) Installer executes your custom action (see the "To
//            Do," above).
//                                                                           
///////////////////////////////////////////////////////////////////////////////

function GetASPNETKEY(hMSI)
	STRING szASPNETKEY;
	NUMBER nvSize;
	NUMBER nvLen;
begin
	nvSize = 256;
	MsiGetProperty(ISMSI_HANDLE, "ASPNETKEY", szASPNETKEY, nvSize);
	if (szASPNETKEY != "#1") then
		//Error
		MessageBox("WARNING: Installer could not confirm that ASP.NET is installed and enabled.", WARNING);
	endif;
end;


function GetIISServiceState(hMSI)
	STRING szServiceName;
	STRING szServiceState;
	NUMBER nvServiceState;
begin
	if(ServiceGetServiceState("W3SVC", nvServiceState) >= ISERR_SUCCESS) then
		//Success
		if(nvServiceState != SERVICE_RUNNING) then
			MessageBox("WARNING: Installer did not detect that IIS service is running.  Please be sure to start IIS service after installation is complete.", WARNING);
		endif;
	else
		//Error
		MessageBox("WARNING: Installer could not detect the state of the IIS service.  IIS service may not be installed.", WARNING);
	endif;
end;
